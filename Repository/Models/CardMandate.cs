using Newtonsoft.Json;
using System.Runtime.Serialization;
using System.Text;

namespace ZIP2GO.Repository.Models
{
    /// <summary>
    /// A mandate is a record of the permission a customer has given you to debit their payment method. This hash contains details about the mandate.
    /// </summary>
    [DataContract]
    public class CardMandate
    {
        /// <summary>
        /// A reference to the consent agreement you have with your customer.
        /// </summary>
        /// <value>A reference to the consent agreement you have with your customer.</value>
        [DataMember(Name = "customer_acceptance")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "customer_acceptance")]
        public CustomerAcceptanceMandate CustomerAcceptance { get; set; }

        /// <summary>
        /// Identifier of the single- or multi-use mandate generated by the payment gateway.
        /// </summary>
        /// <value>Identifier of the single- or multi-use mandate generated by the payment gateway.</value>
        [DataMember(Name = "id")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Identifier of a network transaction.
        /// </summary>
        /// <value>Identifier of a network transaction.</value>
        [DataMember(Name = "network_transaction_id")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "network_transaction_id")]
        public string NetworkTransactionId { get; set; }

        /// <summary>
        /// Reason for the mandate.
        /// </summary>
        /// <value>Reason for the mandate.</value>
        [DataMember(Name = "reason")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// The status of the mandate, which indicates whether it can be used to initiate a payment.
        /// </summary>
        /// <value>The status of the mandate, which indicates whether it can be used to initiate a payment.</value>
        [DataMember(Name = "state")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Indicates the type of the stored credential profile, if any.
        /// </summary>
        /// <value>Indicates the type of the stored credential profile, if any.</value>
        [DataMember(Name = "type")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Indicates the mandate was verified with the payment gateway by Zuora.
        /// </summary>
        /// <value>Indicates the mandate was verified with the payment gateway by Zuora.</value>
        [DataMember(Name = "verified")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "verified")]
        public bool? Verified { get; set; }

        /// <summary>
        /// Specifies if Zuora should verify this mandate.
        /// </summary>
        /// <value>Specifies if Zuora should verify this mandate.</value>
        [DataMember(Name = "verify")]
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "verify")]
        public bool? Verify { get; set; }

        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardMandate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  NetworkTransactionId: ").Append(NetworkTransactionId).Append("\n");
            sb.Append("  CustomerAcceptance: ").Append(CustomerAcceptance).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }
}