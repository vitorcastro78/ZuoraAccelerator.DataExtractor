/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing fulfillment items in the system.
    /// Provides endpoints for creating, updating, deleting, and querying fulfillment items.
    /// </summary>
    [ApiController]
    public class FulfillmentItemsController : ControllerBase
    {
        private readonly IFulfillmentItemsService _fulfillmentItemsService;

        /// <summary>
        /// Initializes a new instance of the fulfillment items controller.
        /// </summary>
        /// <param name="fulfillmentItemsService">Service for managing fulfillment items</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public FulfillmentItemsController(
            IFulfillmentItemsService fulfillmentItemsService)
        {
            _fulfillmentItemsService = fulfillmentItemsService ?? throw new ArgumentNullException(nameof(fulfillmentItemsService));
        }

        /// <summary>
        /// Creates a new fulfillment item.
        /// </summary>
        /// <param name="body">Fulfillment item data to create</param>
        /// <returns>The newly created fulfillment item</returns>
        /// <response code="201">Fulfillment item created successfully</response>
        /// <response code="400">Invalid fulfillment item data</response>
        [HttpPost]
        [Route("/fulfillment_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateFulfillmentItem")]
        public async Task<IActionResult> CreateFulfillmentItem([FromBody] FulfillmentItemCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _fulfillmentItemsService.CreateFulfillmentItem(body, zuoraTrackId, async);

            return Ok(result);
        }

        /// <summary>
        /// Retrieves a fulfillment item by its ID.
        /// </summary>
        /// <param name="fulfillmentItemId">The unique identifier of the fulfillment item</param>
        /// <returns>The requested fulfillment item details</returns>
        /// <response code="200">Fulfillment item found and returned</response>
        /// <response code="404">Fulfillment item not found</response>
        [HttpGet]
        [Route("/fulfillment_items/{fulfillment_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetFulfillmentItem")]
        public async Task<IActionResult> GetFulfillmentItem([FromRoute][Required] string fulfillmentItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(fulfillmentItemId)) return BadRequest("fulfillmentItemId cannot be null");
            if (string.IsNullOrEmpty(zuoraTrackId)) return BadRequest("zuoraTrackId cannot be null");

            var fulfillmentItem = _fulfillmentItemsService.GetFulfillmentItemCached(fulfillmentItemId);
            if (fulfillmentItem is null) fulfillmentItem = _fulfillmentItemsService.GetFulfillmentItem(fulfillmentItemId, zuoraTrackId, async);

            return Ok(fulfillmentItem);
        }

        /// <summary>
        /// Retrieves a list of all fulfillment items.
        /// </summary>
        /// <returns>A paginated list of fulfillment items</returns>
        /// <response code="200">List of fulfillment items retrieved successfully</response>
        [HttpGet]
        [Route("/fulfillment_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetFulfillmentItems")]
        public async Task<IActionResult> GetFulfillmentItems([FromQuery] string zuoraTrackId, bool async = true)
        {
            var fulfillmentItems = _fulfillmentItemsService.GetFulfillmentItemsCached();

            if (fulfillmentItems.Data.Count() == 0) fulfillmentItems = _fulfillmentItemsService.GetFulfillmentItems(zuoraTrackId, async);

            return Ok(fulfillmentItems);
        }

        /// <summary>
        /// Updates an existing fulfillment item.
        /// </summary>
        /// <param name="body">Updated fulfillment item data</param>
        /// <param name="fulfillmentItemId">ID of the fulfillment item to update</param>
        /// <returns>The updated fulfillment item information</returns>
        /// <response code="200">Fulfillment item updated successfully</response>
        /// <response code="404">Fulfillment item not found</response>
        [HttpPatch]
        [Route("/fulfillment_items/{fulfillment_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateFulfillmentItem")]
        public async Task<IActionResult> UpdateFulfillmentItem([FromBody] FulfillmentItemPatchRequest body, [FromRoute][Required] string fulfillmentItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _fulfillmentItemsService.UpdateFulfillmentItem(body, fulfillmentItemId, zuoraTrackId, async);
            return Ok(result);
        }
    }
}