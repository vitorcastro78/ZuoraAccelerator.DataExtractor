/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class PaymentScheduleItemsController : ControllerBase
    {
        private readonly IPaymentScheduleItemsService _paymentScheduleItemsService;

        public PaymentScheduleItemsController(
            IPaymentScheduleItemsService paymentScheduleItemsService)
        {
            _paymentScheduleItemsService = paymentScheduleItemsService ?? throw new ArgumentNullException(nameof(paymentScheduleItemsService));
        }

        /// <summary>
        /// Cancel a payment schedule item
        /// </summary>
        /// <remarks>Cancels the payment schedule item with the given ID.</remarks>
        /// <param name="paymentScheduleItemId">Identifier for the payment schedule item. Can be either &#x60;payment_schedule_item_id&#x60; or &#x60;payment_schedule_item_number&#x60;</param>
        /// <param name="fields">Allows you to specify which fields are returned in the response.          &lt;details&gt;            &lt;summary&gt; Accepted values &lt;/summary&gt;              &#x60;custom_fields&#x60;, &#x60;created_by_id&#x60;, &#x60;updated_by_id&#x60;, &#x60;created_time&#x60;, &#x60;id&#x60;, &#x60;updated_time&#x60;, &#x60;accountId&#x60;, &#x60;amount&#x60;, &#x60;balance&#x60;, &#x60;currency&#x60;, &#x60;debit_memo_id&#x60;, &#x60;invoice_id&#x60;, &#x60;payment_id&#x60;, &#x60;payment_method_id&#x60;, &#x60;description&#x60;, &#x60;prepayment&#x60;, &#x60;payment_gateway_id&#x60;, &#x60;run_hour&#x60;, &#x60;state&#x60;, &#x60;scheduled_date&#x60;, &#x60;payment_schedule_item_number&#x60;, &#x60;payment_schedule_id&#x60;, &#x60;cancellation_reason&#x60;, &#x60;error_message&#x60;, &#x60;payment_option_id&#x60;          &lt;/details&gt;</param>
        /// <param name="paymentScheduleFields">Allows you to specify which fields are returned in the response.          &lt;details&gt;            &lt;summary&gt; Accepted values &lt;/summary&gt;              &#x60;custom_fields&#x60;, &#x60;created_by_id&#x60;, &#x60;updated_by_id&#x60;, &#x60;created_time&#x60;, &#x60;id&#x60;, &#x60;updated_time&#x60;, &#x60;accountId&#x60;, &#x60;description&#x60;, &#x60;next_payment_date&#x60;, &#x60;payment_schedule_number&#x60;, &#x60;number_of_payments&#x60;, &#x60;prepayment&#x60;, &#x60;start_date&#x60;, &#x60;run_hour&#x60;, &#x60;state&#x60;, &#x60;recent_payment_date&#x60;, &#x60;total_payments_errored&#x60;, &#x60;total_payments_processed&#x60;, &#x60;total_amount&#x60;, &#x60;debit_memo_id&#x60;, &#x60;invoice_id&#x60;          &lt;/details&gt;</param>
        /// <param name="expand">Allows you to expand responses by including related object information in a single call. See the [Expand responses](https://developer.zuora.com/quickstart-api/tutorial/expand-responses/) section of the Quickstart API Tutorials for detailed instructions.</param>
        /// <param name="filter">A case-sensitive filter on the list. See the [Filter lists](https://developer.zuora.com/quickstart-api/tutorial/filter-lists/) section of the Quickstart API Tutorial for detailed instructions.                         Note that the filters on this operation are only applicable to the related objects. For example, when you are calling the \&quot;Retrieve a billing document\&quot; operation, you can use the &#x60;filter[]&#x60; parameter on the related objects such as &#x60;filter[]&#x3D;items[accountId].EQ:8ad09e208858b5cf0188595208151c63&#x60;</param>
        /// <param name="pageSize">The maximum number of results to return in a single page. If the specified &#x60;page_size&#x60; is less than 1 or greater than 99, Zuora will return a 400 error.</param>
        /// <param name="zuoraTrackId">A custom identifier for tracking API requests. If you set a value for this header, Zuora returns the same value in the response header. This header enables you to track your API calls to assist with troubleshooting in the event of an issue. The value of this field must use the US-ASCII character set and must not include any of the following characters: colon (:), semicolon (;), double quote (\&quot;), or quote (&#x27;).</param>
        /// <param name="_async">Making asynchronous requests allows you to scale your applications more efficiently by leveraging Zuora&#x27;s infrastructure to enqueue and execute requests for you without blocking. These requests also use built-in retry semantics, which makes them much less likely to fail for non-deterministic reasons, even in extreme high-throughput scenarios. Meanwhile, when you send a request to one of these endpoints, you can expect to receive a response in less than 150 milliseconds and these calls are unlikely to trigger rate limit errors. If set to true, Zuora returns a 202 Accepted response, and the response body contains only a request ID.</param>
        /// <param name="zuoraEntityId">An entity ID. If you have multi-entity enabled and the authorization token is valid for more than one entity, you must use this header to specify which entity to perform the operation on. If the authorization token is only valid for a single entity, or you do not have multi-entity enabled, you do not need to set this header.</param>
        /// <param name="idempotencyKey">Specify a unique idempotency key if you want to perform an idempotent POST or PATCH request. Do not use this header in other request types. This idempotency key should be a unique value, and the Zuora server identifies subsequent retries of the same request using this value. For more information, see [Idempotent Requests](https://developer.zuora.com/api-references/quickstart-api/tag/Idempotent-Requests/).</param>
        /// <param name="acceptEncoding">Include a &#x60;accept-encoding: gzip&#x60; header to compress responses, which can reduce the bandwidth required for a response. If specified, Zuora automatically compresses responses that contain over 1000 bytes. For more information about this header, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).</param>
        /// <param name="contentEncoding">Include a &#x60;content-encoding: gzip&#x60; header to compress a request. Upload a gzipped file for the payload if you specify this header. For more information, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).</param>
        /// <response code="200">Default Response</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpPost]
        [Route("/payment_schedule_items/{payment_schedule_item_id}/cancel")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CancelPaymentScheduleItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentScheduleItem), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CancelPaymentScheduleItem([FromRoute][Required] string paymentScheduleItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentScheduleItemsService.CancelPaymentScheduleItem(paymentScheduleItemId,zuoraTrackId, async);            
            return Ok(result);
        }

        /// <summary>
        /// Create a payment schedule item
        /// </summary>
        /// <remarks>Creates a new Payment Schedule Item object.</remarks>
        /// <param name="body"></param>
        /// <param name="zuoraTrackId">A custom identifier for tracking API requests. If you set a value for this header, Zuora returns the same value in the response header. This header enables you to track your API calls to assist with troubleshooting in the event of an issue. The value of this field must use the US-ASCII character set and must not include any of the following characters: colon (:), semicolon (;), double quote (\&quot;), or quote (&#x27;).</param>
        /// <param name="_async">Making asynchronous requests allows you to scale your applications more efficiently by leveraging Zuora&#x27;s infrastructure to enqueue and execute requests for you without blocking. These requests also use built-in retry semantics, which makes them much less likely to fail for non-deterministic reasons, even in extreme high-throughput scenarios. Meanwhile, when you send a request to one of these endpoints, you can expect to receive a response in less than 150 milliseconds and these calls are unlikely to trigger rate limit errors. If set to true, Zuora returns a 202 Accepted response, and the response body contains only a request ID.</param>
        /// <param name="zuoraEntityIds">An entity ID. If you have Multi-entity enabled and the authorization token is valid for more than one entity, you must use this header to specify which entity to perform the operation on. If the authorization token is only valid for a single entity or you do not have Multi-entity enabled, you do not need to set this header.</param>
        /// <param name="idempotencyKey">Specify a unique idempotency key if you want to perform an idempotent POST or PATCH request. Do not use this header in other request types. This idempotency key should be a unique value, and the Zuora server identifies subsequent retries of the same request using this value. For more information, see [Idempotent Requests](https://developer.zuora.com/api-references/quickstart-api/tag/Idempotent-Requests/).</param>
        /// <param name="acceptEncoding">Include a &#x60;accept-encoding: gzip&#x60; header to compress responses, which can reduce the bandwidth required for a response. If specified, Zuora automatically compresses responses that contain over 1000 bytes. For more information about this header, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).</param>
        /// <param name="contentEncoding">Include a &#x60;content-encoding: gzip&#x60; header to compress a request. Upload a gzipped file for the payload if you specify this header. For more information, see [Request and Response Compression](https://developer.zuora.com/api-references/quickstart-api/tag/Request-and-Response-Compression/).</param>
        /// <param name="fields">Allows you to specify which fields are returned in the response.          &lt;details&gt;            &lt;summary&gt; Accepted values &lt;/summary&gt;              &#x60;custom_fields&#x60;, &#x60;created_by_id&#x60;, &#x60;updated_by_id&#x60;, &#x60;created_time&#x60;, &#x60;id&#x60;, &#x60;updated_time&#x60;, &#x60;accountId&#x60;, &#x60;amount&#x60;, &#x60;balance&#x60;, &#x60;currency&#x60;, &#x60;debit_memo_id&#x60;, &#x60;invoice_id&#x60;, &#x60;payment_id&#x60;, &#x60;payment_method_id&#x60;, &#x60;description&#x60;, &#x60;prepayment&#x60;, &#x60;payment_gateway_id&#x60;, &#x60;run_hour&#x60;, &#x60;state&#x60;, &#x60;scheduled_date&#x60;, &#x60;payment_schedule_item_number&#x60;, &#x60;payment_schedule_id&#x60;, &#x60;cancellation_reason&#x60;, &#x60;error_message&#x60;, &#x60;payment_option_id&#x60;          &lt;/details&gt;</param>
        /// <param name="paymentScheduleFields">Allows you to specify which fields are returned in the response.          &lt;details&gt;            &lt;summary&gt; Accepted values &lt;/summary&gt;              &#x60;custom_fields&#x60;, &#x60;created_by_id&#x60;, &#x60;updated_by_id&#x60;, &#x60;created_time&#x60;, &#x60;id&#x60;, &#x60;updated_time&#x60;, &#x60;accountId&#x60;, &#x60;description&#x60;, &#x60;next_payment_date&#x60;, &#x60;payment_schedule_number&#x60;, &#x60;number_of_payments&#x60;, &#x60;prepayment&#x60;, &#x60;start_date&#x60;, &#x60;run_hour&#x60;, &#x60;state&#x60;, &#x60;recent_payment_date&#x60;, &#x60;total_payments_errored&#x60;, &#x60;total_payments_processed&#x60;, &#x60;total_amount&#x60;, &#x60;debit_memo_id&#x60;, &#x60;invoice_id&#x60;          &lt;/details&gt;</param>
        /// <param name="expand">Allows you to expand responses by including related object information in a single call. See the [Expand responses](https://developer.zuora.com/quickstart-api/tutorial/expand-responses/) section of the Quickstart API Tutorials for detailed instructions.</param>
        /// <param name="filter">A case-sensitive filter on the list. See the [Filter lists](https://developer.zuora.com/quickstart-api/tutorial/filter-lists/) section of the Quickstart API Tutorial for detailed instructions.                         Note that the filters on this operation are only applicable to the related objects. For example, when you are calling the \&quot;Retrieve a billing document\&quot; operation, you can use the &#x60;filter[]&#x60; parameter on the related objects such as &#x60;filter[]&#x3D;items[accountId].EQ:8ad09e208858b5cf0188595208151c63&#x60;</param>
        /// <param name="pageSize">The maximum number of results to return in a single page. If the specified &#x60;page_size&#x60; is less than 1 or greater than 99, Zuora will return a 400 error.</param>
        /// <response code="201">Default Response</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpPost]
        [Route("/payment_schedule_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreatePaymentScheduleItem")]
        [SwaggerResponse(statusCode: 201, type: typeof(PaymentScheduleItem), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CreatePaymentScheduleItem([FromBody] PaymentScheduleItemCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentScheduleItemsService.CreatePaymentScheduleItem(body, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Gets a payment schedule item by ID
        /// </summary>
        /// <param name="paymentScheduleItemId">The ID of the payment schedule item to retrieve</param>
        /// <returns>The requested payment schedule item details</returns>
        [HttpGet]
        [Route("/payment_schedule_items/{payment_schedule_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPaymentScheduleItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentScheduleItem), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetPaymentScheduleItem([FromRoute][Required] string paymentScheduleItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(paymentScheduleItemId)) return BadRequest("paymentScheduleItemId cannot be null");
            if (string.IsNullOrEmpty(zuoraTrackId)) return BadRequest("zuoraTrackId cannot be null");

            var paymentScheduleItem = _paymentScheduleItemsService.GetPaymentScheduleItemCached(paymentScheduleItemId);
            if (paymentScheduleItem is null) paymentScheduleItem = _paymentScheduleItemsService.GetPaymentScheduleItem(paymentScheduleItemId, zuoraTrackId, async);

            return Ok(paymentScheduleItem);
        }

        /// <summary>
        /// Retries a failed payment schedule item
        /// </summary>
        /// <param name="body">The retry request data</param>
        /// <param name="paymentScheduleItemId">The ID of the payment schedule item to retry</param>
        /// <returns>The retried payment schedule item</returns>
        [HttpPost]
        [Route("/payment_schedule_items/{payment_schedule_item_id}/retry")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RetryPaymentScheduleItem")]
        [SwaggerResponse(statusCode: 201, type: typeof(PaymentScheduleItem), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> RetryPaymentScheduleItem([FromBody] PaymentScheduleItemRetry body, [FromRoute][Required] string paymentScheduleItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentScheduleItemsService.RetryPaymentScheduleItem(body, paymentScheduleItemId, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Skips a payment schedule item
        /// </summary>
        /// <param name="paymentScheduleItemId">The ID of the payment schedule item to skip</param>
        /// <returns>The skipped payment schedule item</returns>
        [HttpPost]
        [Route("/payment_schedule_items/{payment_schedule_item_id}/skip")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SkipPaymentScheduleItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentScheduleItem), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> SkipPaymentScheduleItem([FromRoute][Required] string paymentScheduleItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentScheduleItemsService.SkipPaymentScheduleItem(paymentScheduleItemId, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Updates a payment schedule item
        /// </summary>
        /// <param name="body">The payment schedule item data to update</param>
        /// <param name="paymentScheduleItemId">The ID of the payment schedule item to update</param>
        /// <returns>The updated payment schedule item</returns>
        [HttpPatch]
        [Route("/payment_schedule_items/{payment_schedule_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdatePaymentScheduleItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentScheduleItem), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> UpdatePaymentScheduleItem([FromBody] PaymentScheduleItemPatch body, [FromRoute][Required] string paymentScheduleItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentScheduleItemsService.UpdatePaymentScheduleItem(body, paymentScheduleItemId, zuoraTrackId, async);
            return Ok(result);
        }
    }
}