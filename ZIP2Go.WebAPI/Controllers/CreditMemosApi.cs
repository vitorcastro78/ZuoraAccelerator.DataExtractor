/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing credit memos in the system.
    /// Provides endpoints for creating, updating, deleting, and querying credit memos.
    /// </summary>
    [ApiController]
    public class CreditMemosController : ControllerBase
    {
        private readonly ICreditMemosService _creditMemosService;

        /// <summary>
        /// Initializes a new instance of the credit memos controller.
        /// </summary>
        /// <param name="creditMemosService">Service for managing credit memos</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public CreditMemosController(
            ICreditMemosService creditMemosService)
        {
            _creditMemosService = creditMemosService ?? throw new ArgumentNullException(nameof(creditMemosService));
        }

        /// <summary>
        /// Creates a new credit memo.
        /// </summary>
        /// <param name="body">Credit memo data to create</param>
        /// <returns>The newly created credit memo</returns>
        /// <response code="201">Credit memo created successfully</response>
        /// <response code="400">Invalid credit memo data</response>
        [HttpPost]
        [Route("/credit_memos")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateCreditMemo")]
        public async Task<IActionResult> CreateCreditMemo([FromBody] CreditMemoCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _creditMemosService.CreateCreditMemo(body, zuoraTrackId, async);

            return Ok(result);
        }

        /// <summary>
        /// Retrieves a credit memo by its ID.
        /// </summary>
        /// <param name="creditMemoId">The unique identifier of the credit memo</param>
        /// <returns>The requested credit memo details</returns>
        /// <response code="200">Credit memo found and returned</response>
        /// <response code="404">Credit memo not found</response>
        [HttpGet]
        [Route("/credit_memos/{credit_memo_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetCreditMemo")]
        public async Task<IActionResult> GetCreditMemo([FromRoute][Required] string creditMemoId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(creditMemoId)) 
            {
                return BadRequest("creditMemoId cannot be null");
            }
            if (string.IsNullOrEmpty(zuoraTrackId)) 
            {
                return BadRequest("zuoraTrackId cannot be null");
            }

            var creditMemo = _creditMemosService.GetCreditMemoCached(creditMemoId);
            if (creditMemo is null) 
            {
                creditMemo = _creditMemosService.GetCreditMemo(creditMemoId, zuoraTrackId, async);
            }

            return Ok(creditMemo);
        }

        /// <summary>
        /// Retrieves a list of all credit memos.
        /// </summary>
        /// <returns>A paginated list of credit memos</returns>
        /// <response code="200">List of credit memos retrieved successfully</response>
        [HttpGet]
        [Route("/credit_memos")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetCreditMemos")]
        public async Task<IActionResult> GetCreditMemos([FromQuery] string cursor, string zuoraTrackId, bool async = true)
        {
            var creditMemos = _creditMemosService.GetCreditMemosCached();

            if (creditMemos.Data.Count() == 0) 
            {
                creditMemos = _creditMemosService.GetCreditMemos(cursor, zuoraTrackId, async);
            }

            return Ok(creditMemos);
        }

        /// <summary>
        /// Updates an existing credit memo.
        /// </summary>
        /// <param name="body">Updated credit memo data</param>
        /// <param name="creditMemoId">ID of the credit memo to update</param>
        /// <returns>The updated credit memo information</returns>
        /// <response code="200">Credit memo updated successfully</response>
        /// <response code="404">Credit memo not found</response>
        [HttpPatch]
        [Route("/credit_memos/{credit_memo_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateCreditMemo")]
        public async Task<IActionResult> UpdateCreditMemo([FromBody] CreditMemoPatchRequest body, [FromRoute][Required] string creditMemoId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _creditMemosService.PatchCreditMemo(body, creditMemoId, zuoraTrackId, async);

            return Ok(result);
        }
    }
}