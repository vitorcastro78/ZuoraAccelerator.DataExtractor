/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing debit memos in the system.
    /// Provides endpoints for creating, updating, deleting, and querying debit memos.
    /// </summary>
    [ApiController]
    public class DebitMemosController : ControllerBase
    {
        private readonly IDebitMemosService _debitMemosService;

        /// <summary>
        /// Initializes a new instance of the debit memos controller.
        /// </summary>
        /// <param name="debitMemosService">Service for managing debit memos</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public DebitMemosController(
            IDebitMemosService debitMemosService)
        {
            _debitMemosService = debitMemosService ?? throw new ArgumentNullException(nameof(debitMemosService));
        }

        /// <summary>
        /// Creates a new debit memo.
        /// </summary>
        /// <param name="body">Debit memo data to create</param>
        /// <returns>The newly created debit memo</returns>
        /// <response code="201">Debit memo created successfully</response>
        /// <response code="400">Invalid debit memo data</response>
        [HttpPost]
        [Route("/debit_memos")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateDebitMemo")]
        public async Task<IActionResult> CreateDebitMemo([FromBody] DebitMemoCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _debitMemosService.CreateDebitMemo(body, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Retrieves a debit memo by its ID.
        /// </summary>
        /// <param name="debitMemoId">The unique identifier of the debit memo</param>
        /// <returns>The requested debit memo details</returns>
        /// <response code="200">Debit memo found and returned</response>
        /// <response code="404">Debit memo not found</response>
        [HttpGet]
        [Route("/debit_memos/{debit_memo_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetDebitMemo")]
        public async Task<IActionResult> GetDebitMemo([FromRoute][Required] string debitMemoId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(debitMemoId)) 
            {
                return BadRequest("debitMemoId cannot be null");
            }
            if (string.IsNullOrEmpty(zuoraTrackId)) 
            {
                return BadRequest("zuoraTrackId cannot be null");
            }

            var debitMemo = _debitMemosService.GetDebitMemoCached(debitMemoId);
            if (debitMemo is null) 
            {
                debitMemo = _debitMemosService.GetDebitMemo(debitMemoId, zuoraTrackId, async);
            }

            return Ok(debitMemo);
        }

        /// <summary>
        /// Retrieves a list of all debit memos.
        /// </summary>
        /// <returns>A paginated list of debit memos</returns>
        /// <response code="200">List of debit memos retrieved successfully</response>
        [HttpGet]
        [Route("/debit_memos")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetDebitMemos")]
        public async Task<IActionResult> GetDebitMemos([FromQuery] string cursor, string zuoraTrackId, bool async = true)
        {
            var debitMemos = _debitMemosService.GetDebitMemosCached();

            if (debitMemos.Data.Count() == 0) 
            {
                debitMemos = _debitMemosService.GetDebitMemos(cursor, zuoraTrackId, async);
            }

            return Ok(debitMemos);
        }

        /// <summary>
        /// Updates an existing debit memo.
        /// </summary>
        /// <param name="body">Updated debit memo data</param>
        /// <param name="debitMemoId">ID of the debit memo to update</param>
        /// <returns>The updated debit memo information</returns>
        /// <response code="200">Debit memo updated successfully</response>
        /// <response code="404">Debit memo not found</response>
        [HttpPatch]
        [Route("/debit_memos/{debit_memo_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateDebitMemo")]
        public async Task<IActionResult> UpdateDebitMemo([FromBody] DebitMemoPatchRequest body, [FromRoute][Required] string debitMemoId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _debitMemosService.PatchDebitMemo(body, debitMemoId, zuoraTrackId, async);
            return Ok(result);
        }
    }
}