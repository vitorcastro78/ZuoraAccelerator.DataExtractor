/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing payment runs in the system.
    /// Provides endpoints for creating, updating, deleting, and querying payment runs.
    /// </summary>
    [ApiController]
    public class PaymentRunsController : ControllerBase
    {
        private readonly IPaymentRunsService _paymentRunsService;

        /// <summary>
        /// Initializes a new instance of the payment runs controller.
        /// </summary>
        /// <param name="paymentRunsService">Service for managing payment runs</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public PaymentRunsController(
            IPaymentRunsService paymentRunsService)
        {
            _paymentRunsService = paymentRunsService ?? throw new ArgumentNullException(nameof(paymentRunsService));
        }

        /// <summary>
        /// Creates a new payment run.
        /// </summary>
        /// <param name="body">Payment run data to create</param>
        /// <returns>The newly created payment run</returns>
        /// <response code="201">Payment run created successfully</response>
        /// <response code="400">Invalid payment run data</response>
        [HttpPost]
        [Route("/payment_runs")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreatePaymentRun")]
        public async Task<IActionResult> CreatePaymentRun([FromBody] PaymentRunCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentRunsService.CreatePaymentRuns(body, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Retrieves a payment run by its ID.
        /// </summary>
        /// <param name="paymentRunId">The unique identifier of the payment run</param>
        /// <returns>The requested payment run details</returns>
        /// <response code="200">Payment run found and returned</response>
        /// <response code="404">Payment run not found</response>
        [HttpGet]
        [Route("/payment_runs/{payment_run_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPaymentRun")]
        public async Task<IActionResult> GetPaymentRun([FromRoute][Required] string paymentRunId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(paymentRunId)) return BadRequest("paymentRunId cannot be null");
            if (string.IsNullOrEmpty(zuoraTrackId)) return BadRequest("zuoraTrackId cannot be null");

            var paymentRun = _paymentRunsService.GetPaymentRunCached(paymentRunId);
            if (paymentRun is null) paymentRun = _paymentRunsService.GetPaymentRun(paymentRunId, zuoraTrackId, async);

            return Ok(paymentRun);
        }

        /// <summary>
        /// Retrieves a list of all payment runs.
        /// </summary>
        /// <returns>A paginated list of payment runs</returns>
        /// <response code="200">List of payment runs retrieved successfully</response>
        [HttpGet]
        [Route("/payment_runs")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPaymentRuns")]
        public async Task<IActionResult> GetPaymentRuns([FromQuery] string cursor, string zuoraTrackId, bool async = true)
        {
            var paymentRuns = _paymentRunsService.GetPaymentRunsCached();

            if (paymentRuns.Data.Count() == 0) paymentRuns = _paymentRunsService.GetPaymentRuns(cursor, zuoraTrackId, async);

            return Ok(paymentRuns);
        }

        /// <summary>
        /// Updates an existing payment run.
        /// </summary>
        /// <param name="body">Updated payment run data</param>
        /// <param name="paymentRunId">ID of the payment run to update</param>
        /// <returns>The updated payment run information</returns>
        /// <response code="200">Payment run updated successfully</response>
        /// <response code="404">Payment run not found</response>
        [HttpPatch]
        [Route("/payment_runs/{payment_run_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdatePaymentRun")]
        public async Task<IActionResult> UpdatePaymentRun([FromBody] PaymentRunPatchRequest body, [FromRoute][Required] string paymentRunId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentRunsService.UpdatePaymentRuns(body, paymentRunId, zuoraTrackId, async);
            return Ok(result);
        }
    }
}