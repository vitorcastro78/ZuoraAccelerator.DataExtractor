/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing user accounts in the system.
    /// Provides endpoints for creating, updating, deleting, and querying accounts.
    /// </summary>
    [ApiController]
    public class AccountsController : ControllerBase
    {
        private readonly IAccountsService _accountsService;

        /// <summary>
        /// Initializes a new instance of the accounts controller.
        /// </summary>
        /// <param name="accountsService">Service for managing accounts</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public AccountsController(
            IAccountsService accountsService)
        {
            _accountsService = accountsService ?? throw new ArgumentNullException(nameof(accountsService));
        }

        /// <summary>
        /// Creates a new account in the system.
        /// </summary>
        /// <param name="body">Account data to create</param>
        /// <returns>The newly created account</returns>
        /// <response code="201">Account created successfully</response>
        /// <response code="400">Invalid account data</response>
        [HttpPost]
        [Route("/accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateAccount")]
        [SwaggerResponse(statusCode: 201, type: typeof(Account), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CreateAccount([FromBody] AccountCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _accountsService.CreateAccount(body, zuoraTrackId, async);           
            return Ok(result);
        }

        /// <summary>
        /// Deletes an account from the system
        /// </summary>
        /// <param name="accountId">The ID of the account to delete</param>
        /// <param name="zuoraTrackId">The Zuora track ID for tracking the request</param>
        /// <param name="async">Whether to perform the operation asynchronously</param>
        /// <returns>NoContent if successful</returns>
        [HttpDelete]
        [Route("/accounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteAccount")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> DeleteAccount([FromRoute][Required] string accountId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            _accountsService.DeleteAccount(accountId, zuoraTrackId, async);
            return NoContent();
        }

        /// <summary>
        /// Generates billing documents for an account
        /// </summary>
        /// <param name="body">The request body containing billing document generation parameters</param>
        /// <param name="accountId">The ID of the account</param>
        /// <param name="zuoraTrackId">The Zuora track ID for tracking the request</param>
        /// <param name="async">Whether to perform the operation asynchronously</param>
        /// <returns>The generated billing documents response</returns>
        [HttpPost]
        [Route("/accounts/{accountId}/bill")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GenerateBillingDocuments")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateBillingDocumentsAccountResponse), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GenerateBillingDocuments([FromBody] GenerateBillingDocumentsAccountRequest body, [FromRoute][Required] string accountId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _accountsService.GenerateBillingDocuments(body, accountId, zuoraTrackId, async);

            return Ok(result);
        }

        /// <summary>
        /// Retrieves an account by its ID.
        /// </summary>
        /// <param name="accountId">The unique identifier of the account</param>
        /// <returns>The requested account details</returns>
        /// <response code="200">Account found and returned</response>
        /// <response code="404">Account not found</response>
        [HttpGet]
        [Route("/accounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetAccount([FromRoute][Required] string accountId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(accountId)) 
            {
                return BadRequest("accountId cannot be null");
            }
            if (string.IsNullOrEmpty(zuoraTrackId)) 
            {
                return BadRequest("zuoraTrackId cannot be null");
            }

            var account = _accountsService.GetAccountCached(accountId);

            if (account is null) 
            {
                account = _accountsService.GetAccount(accountId, zuoraTrackId, async);
            }

            return Ok(account);
        }

        /// <summary>
        /// Retrieves a list of all accounts.
        /// </summary>
        /// <returns>A paginated list of accounts</returns>
        /// <response code="200">List of accounts retrieved successfully</response>
        [HttpGet]
        [Route("/accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ListAccountResponse), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetAccounts([FromQuery] string zuoraTrackId, bool async = true)
        {
            var accounts = _accountsService.GetAccountsCached();

            if (accounts.Data.Count() == 0) 
            {
                accounts = _accountsService.GetAccountsCached();
            }

            return Ok(accounts);
        }

        /// <summary>
        /// Updates an existing account's information.
        /// </summary>
        /// <param name="body">Updated account data</param>
        /// <param name="accountId">ID of the account to update</param>
        /// <returns>The updated account information</returns>
        /// <response code="200">Account updated successfully</response>
        /// <response code="404">Account not found</response>
        [HttpPatch]
        [Route("/accounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Default Response")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> UpdateAccount([FromBody] AccountPatchRequest body, [FromRoute][Required] string accountId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _accountsService.UpdateAccount(body, accountId, zuoraTrackId, async);

            return Ok(result);
        }
    }
}