/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.Repository.Models;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing payments in the system.
    /// Provides endpoints for creating, updating, deleting, and querying payments.
    /// </summary>
    [ApiController]
    public class PaymentsController : ControllerBase
    {
        private readonly IPaymentsService _paymentsService;

        /// <summary>
        /// Initializes a new instance of the payments controller.
        /// </summary>
        /// <param name="paymentsService">Service for managing payments</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public PaymentsController(
            IPaymentsService paymentsService)
        {
            _paymentsService = paymentsService ?? throw new ArgumentNullException(nameof(paymentsService));
        }

        /// <summary>
        /// Creates a new payment.
        /// </summary>
        /// <param name="body">Payment data to create</param>
        /// <returns>The newly created payment</returns>
        /// <response code="201">Payment created successfully</response>
        /// <response code="400">Invalid payment data</response>
        [HttpPost]
        [Route("/payments")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreatePayment")]
        public async Task<IActionResult> CreatePayment([FromBody] PaymentCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentsService.CreatePayment(body, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Retrieves a payment by its ID.
        /// </summary>
        /// <param name="paymentId">The unique identifier of the payment</param>
        /// <returns>The requested payment details</returns>
        /// <response code="200">Payment found and returned</response>
        /// <response code="404">Payment not found</response>
        [HttpGet]
        [Route("/payments/{payment_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPayment")]
        public async Task<IActionResult> GetPayment([FromRoute][Required] string paymentId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(paymentId)) return BadRequest("paymentId cannot be null");
            if (string.IsNullOrEmpty(zuoraTrackId)) return BadRequest("zuoraTrackId cannot be null");

            var product = _paymentsService.GetPaymentCached(paymentId);
            if (product is null) product = _paymentsService.GetPayment(paymentId, zuoraTrackId, async);

            return Ok(product);
        }

        /// <summary>
        /// Retrieves a list of all payments.
        /// </summary>
        /// <returns>A paginated list of payments</returns>
        /// <response code="200">List of payments retrieved successfully</response>
        [HttpGet]
        [Route("/payments")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetPayments")]
        public async Task<IActionResult> GetPayments([FromQuery] string cursor, string zuoraTrackId, bool async = true)
        {
            var products = _paymentsService.GetPaymentsCached();

            if (products.Data.Count() == 0) products = _paymentsService.GetPayments(cursor, zuoraTrackId, async);

            return Ok(products);
        }

        /// <summary>
        /// Updates an existing payment.
        /// </summary>
        /// <param name="body">Updated payment data</param>
        /// <param name="paymentId">ID of the payment to update</param>
        /// <returns>The updated payment information</returns>
        /// <response code="200">Payment updated successfully</response>
        /// <response code="404">Payment not found</response>
        [HttpPatch]
        [Route("/payments/{payment_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdatePayment")]
        public async Task<IActionResult> UpdatePayment([FromBody] PaymentPatchRequest body, [FromRoute][Required] string paymentId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _paymentsService.UpdatePayment(body, paymentId, zuoraTrackId, async);
            return Ok(result);
        }
    }
}