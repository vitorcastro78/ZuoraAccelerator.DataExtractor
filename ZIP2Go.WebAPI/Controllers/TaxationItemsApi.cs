/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing taxation items in the system.
    /// Provides endpoints for creating, updating, deleting, and querying taxation items.
    /// </summary>
    [ApiController]
    public class TaxationItemsController : ControllerBase
    {
        private readonly ITaxationItemsService _taxationItemsService;

        /// <summary>
        /// Initializes a new instance of the taxation items controller.
        /// </summary>
        /// <param name="taxationItemsService">Service for managing taxation items</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public TaxationItemsController(
            ITaxationItemsService taxationItemsService)
        {
            _taxationItemsService = taxationItemsService ?? throw new ArgumentNullException(nameof(taxationItemsService));
        }

        /// <summary>
        /// Creates a new taxation item.
        /// </summary>
        /// <param name="body">Taxation item data to create</param>
        /// <returns>The newly created taxation item</returns>
        /// <response code="201">Taxation item created successfully</response>
        /// <response code="400">Invalid taxation item data</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpPost]
        [Route("/taxation_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateTaxationItem")]
        [SwaggerResponse(statusCode: 201, type: typeof(TaxationItem), description: "Taxation item created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid taxation item data")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> CreateTaxationItem([FromBody] TaxationItemCreateRequest body, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _taxationItemsService.CreateTaxationItem(body, zuoraTrackId, async);
            return Ok(result);
        }

        /// <summary>
        /// Deletes a taxation item.
        /// </summary>
        /// <remarks>Permanently deletes a taxation item. This operation cannot be undone once it is performed.</remarks>
        /// <param name="taxationItemId">ID of the taxation item.</param>
        /// <response code="204">Taxation item deleted successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Taxation item not found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpDelete]
        [Route("/taxation_items/{taxation_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteTaxationItem")]
        [SwaggerResponse(statusCode: 204, description: "Taxation item deleted successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Taxation item not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> DeleteTaxationItem([FromRoute][Required] string taxationItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            _taxationItemsService.DeleteTaxationItem(taxationItemId, zuoraTrackId, async);
            return NoContent();
        }

        /// <summary>
        /// Retrieves a taxation item by its ID.
        /// </summary>
        /// <param name="taxationItemId">The unique identifier of the taxation item</param>
        /// <returns>The requested taxation item details</returns>
        /// <response code="200">Taxation item found and returned</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Taxation item not found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpGet]
        [Route("/taxation_items/{taxation_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTaxationItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaxationItem), description: "Taxation item found and returned")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Taxation item not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetTaxationItem([FromRoute][Required] string taxationItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(taxationItemId)) return BadRequest("taxationItemId cannot be null");
            if (string.IsNullOrEmpty(zuoraTrackId)) return BadRequest("zuoraTrackId cannot be null");

            var taxationItem = _taxationItemsService.GetTaxationItemCached(taxationItemId);
            if (taxationItem is null) taxationItem = _taxationItemsService.GetTaxationItem(taxationItemId, zuoraTrackId, async);

            return Ok(taxationItem);
        }

        /// <summary>
        /// Retrieves a list of all taxation items.
        /// </summary>
        /// <returns>A paginated list of taxation items</returns>
        /// <response code="200">List of taxation items retrieved successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpGet]
        [Route("/taxation_items")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTaxationItems")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaxationItemListResponse), description: "List of taxation items retrieved successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> GetTaxationItems([FromQuery] string zuoraTrackId, bool async = true)
        {
            var taxationItems = _taxationItemsService.GetTaxationItemsCached();

            if (taxationItems.Data.Count() == 0) taxationItems = _taxationItemsService.GetTaxationItems(zuoraTrackId, async);

            return Ok(taxationItems);
        }

        /// <summary>
        /// Updates an existing taxation item.
        /// </summary>
        /// <param name="body">Updated taxation item data</param>
        /// <param name="taxationItemId">ID of the taxation item to update</param>
        /// <returns>The updated taxation item information</returns>
        /// <response code="200">Taxation item updated successfully</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Taxation item not found</response>
        /// <response code="405">Method Not Allowed</response>
        /// <response code="429">Too Many Requests</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="502">Bad Gateway</response>
        /// <response code="503">Service Unavailable</response>
        /// <response code="504">Gateway Timeout</response>
        [HttpPatch]
        [Route("/taxation_items/{taxation_item_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTaxationItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaxationItem), description: "Taxation item updated successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Taxation item not found")]
        [SwaggerResponse(statusCode: 405, type: typeof(ErrorResponse), description: "Method Not Allowed")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Too Many Requests")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 502, type: typeof(ErrorResponse), description: "Bad Gateway")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "Service Unavailable")]
        [SwaggerResponse(statusCode: 504, type: typeof(ErrorResponse), description: "Gateway Timeout")]
        public async Task<IActionResult> UpdateTaxationItem([FromBody] TaxationItemPatchRequest body, [FromRoute][Required] string taxationItemId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            var result = _taxationItemsService.UpdateTaxationItem(body, taxationItemId, zuoraTrackId, async);
            return Ok(result);
        }
    }
}