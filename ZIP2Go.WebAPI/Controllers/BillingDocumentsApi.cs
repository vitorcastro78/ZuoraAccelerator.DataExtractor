/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://developer.zuora.com/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.
 *
 * OpenAPI spec version: 2024-01-10
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Service;
using Service.Interfaces;
using Service.Models;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using ZIP2GO.WebAPI.Attributes;
using ZIP2GO.WebAPI.Security;

namespace ZIP2GO.WebAPI.Controllers
{
    /// <summary>
    /// Controller responsible for managing billing documents.
    /// Provides endpoints for creating, retrieving and managing billing-related documents.
    /// </summary>
    [ApiController]
    public class BillingDocumentsController : ControllerBase
    {
        private readonly IBillingDocumentsService _billingDocumentsService;

        /// <summary>
        /// Initializes a new instance of the billing documents controller.
        /// </summary>
        /// <param name="billingDocumentsService">Service for managing billing documents</param>
        /// <param name="httpContextAccessor">HTTP context accessor</param>
        /// <param name="cache">Cache provider</param>
        /// <exception cref="ArgumentNullException">Thrown when any dependency is null</exception>
        public BillingDocumentsController(
            IBillingDocumentsService billingDocumentsService)
        {
            _billingDocumentsService = billingDocumentsService ?? throw new ArgumentNullException(nameof(billingDocumentsService));
        }

        /// <summary>
        /// Creates a new billing document.
        /// </summary>
        /// <param name="body">Billing document data to create</param>
        /// <returns>The newly created billing document</returns>
        /// <response code="201">Billing document created successfully</response>
        /// <response code="400">Invalid billing document data</response>
        [HttpPost]
        [Route("/billing_documents")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateBillingDocument")]
        public async Task<IActionResult> CreateBillingDocument([FromBody] BillingDocumentCreateRequest body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(BillingDocument));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 504 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(504, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account_number\" : \"account_number\",\n  \"amount_paid\" : 7.061401241503109,\n  \"exclude_from_auto_apply_rules\" : true,\n  \"description\" : \"description\",\n  \"state_transitions\" : \"\",\n  \"past_due\" : true,\n  \"type\" : \"credit_memo\",\n  \"amount_refunded\" : 0.8008281904610115,\n  \"reason_code\" : \"reason_code\",\n  \"total\" : 6.027456183070403,\n  \"billing_document_number\" : \"billing_document_number\",\n  \"balance\" : 5.637376656633329,\n  \"invoice_id\" : \"invoice_id\",\n  \"id\" : \"id\",\n  \"state\" : \"draft\",\n  \"created_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"transfer_to_accounting\" : true,\n  \"posted_by_id\" : \"posted_by_id\",\n  \"remaining_balance\" : 2.3021358869347655,\n  \"custom_fields\" : \"\",\n  \"due_date\" : \"2023-01-01T00:00:00.000+00:00\",\n  \"document_date\" : \"2023-01-01T00:00:00.000+00:00\",\n  \"pay\" : true,\n  \"tax\" : 5.962133916683182,\n  \"accountId\" : \"accountId\",\n  \"custom_objects\" : \"\",\n  \"subtotal\" : 1.4658129805029452,\n  \"paid\" : true,\n  \"updated_by_id\" : \"updated_by_id\",\n  \"created_by_id\" : \"created_by_id\",\n  \"items\" : \"\",\n  \"account\" : \"\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BillingDocument>(exampleJson)
            : default(BillingDocument);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a billing document by its ID.
        /// </summary>
        /// <param name="billingDocumentId">The unique identifier of the billing document</param>
        /// <returns>The requested billing document details</returns>
        /// <response code="200">Billing document found and returned</response>
        /// <response code="404">Billing document not found</response>
        [HttpGet]
        [Route("/billing_documents/{billing_document_id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetBillingDocument")]
        public async Task<IActionResult> GetBillingDocument([FromRoute][Required] string billingDocumentId, [FromQuery] string zuoraTrackId, bool async = true)
        {
            if (string.IsNullOrEmpty(billingDocumentId)) return BadRequest("billingDocumentId cannot be null");
            if (string.IsNullOrEmpty(zuoraTrackId)) return BadRequest("zuoraTrackId cannot be null");

            var billingDocument = _billingDocumentsService.GetBillingDocumentCached(billingDocumentId);

            if (billingDocument is null) billingDocument = _billingDocumentsService.GetBillingDocument(billingDocumentId, zuoraTrackId, async);

            return Ok(billingDocument);
        }

        /// <summary>
        /// Retrieves a list of all billing documents.
        /// </summary>
        /// <returns>A paginated list of billing documents</returns>
        /// <response code="200">List of billing documents retrieved successfully</response>
        [HttpGet]
        [Route("/billing_documents")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetBillingDocuments")]
        public async Task<IActionResult> GetBillingDocuments([FromQuery] string cursor, string zuoraTrackId, bool async = true)
        {
            var billingDocuments = _billingDocumentsService.GetBillingDocumentsCached();

            if (billingDocuments.Data.Count() == 0) 
            {
                billingDocuments = _billingDocumentsService.GetBillingDocuments(cursor, zuoraTrackId, async);
            }

            return Ok(billingDocuments);
        }

        ///// <summary>
        ///// Updates an existing billing document.
        ///// </summary>
        ///// <param name="body">Updated billing document data</param>
        ///// <param name="billingDocumentId">ID of the billing document to update</param>
        ///// <returns>The updated billing document information</returns>
        ///// <response code="200">Billing document updated successfully</response>
        ///// <response code="404">Billing document not found</response>
        //[HttpPatch]
        //[Route("/billing_documents/{billing_document_id}")]
         //[Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        //[ValidateModelState]
        //[SwaggerOperation("UpdateBillingDocument")]
        //public async Task<IActionResult> UpdateBillingDocument([FromBody] BillingDocumentPatchRequest body, [FromRoute][Required] string billingDocumentId)
        //{
        //    // ... existing code ...
        //}
    }
}